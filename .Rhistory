"dbnsfp.1000gp1.af", "cadd.phred",
#"dbnsfp.sift.converted_rankscore", "dbnsfp.sift.pred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
#,
#"dbnsfp.mutationassessor.rankscore", "dbnsfp.mutationassessor.pred",
#"dbnsfp.lrt.converted_rankscore", "dbnsfp.lrt.pred",
#"dbnsfp.metasvm.rankscore", "dbnsfp.metasvm.pred"
), return.as=data.frame)
# if (somatic == TRUE){
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
annos <- cbind(annos, coverage)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
#"dbnsfp.sift.converted_rankscore", "dbnsfp.sift.pred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
#,
#"dbnsfp.mutationassessor.rankscore", "dbnsfp.mutationassessor.pred",
#"dbnsfp.lrt.converted_rankscore", "dbnsfp.lrt.pred",
#"dbnsfp.metasvm.rankscore", "dbnsfp.metasvm.pred"
), return.as="data.frame")
# if (somatic == TRUE){
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
annos <- cbind(annos, coverage)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
#"dbnsfp.sift.converted_rankscore", "dbnsfp.sift.pred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
#,
#"dbnsfp.mutationassessor.rankscore", "dbnsfp.mutationassessor.pred",
#"dbnsfp.lrt.converted_rankscore", "dbnsfp.lrt.pred",
#"dbnsfp.metasvm.rankscore", "dbnsfp.metasvm.pred"
))
head(annos)
annos$cadd.gene
data.frame(annos$cadd.gene)
DataFrame(annos$cadd.gene)
?getVariants
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred","records"
))
annos
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
), return.as="records")
annos
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
), return.as="text")
annos
fromJSON(annos)
df <- fromJSON(annos)
head(df)
df <- fromJSON(annos, check.names=F)
?fromJSON
df <- fromJSON(annos, simplifyDataFrame =F)
df
df <- fromJSON(annos, simplifyDataFrame =F, flatten=T)
df
df <- fromJSON(annos, flatten=T)
df
head(df)
df <- fromJSON(annos, flatten=F)
head(df)
df <- fromJSON(annos, flatten=T)
head(df)
df <- fromJSON(annos, flatten=T, simplifyVector = F)
df
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
head(annos)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
), "text")
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
), return.as="text")
annos
fromJSON(annos, flatten=F)
df <- fromJSON(annos, flatten=F)
head(df)
df <- fromJSON(annos, flatten=F, dataframe='rows')
df <- fromJSON(annos, flatten=F, dataframe)
df <- fromJSON(annos, flatten=F, check.names=F)
df <- fromJSON(annos, flatten=F, check_names=F)
simplify(annos)
annos
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp1.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",  "cadd.gene.prot.protpos",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
head(annos)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
head(annos)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.protein.position", "snpeff.ann.hgvs_p", "snpeff.ann.gene_name",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
#  "cadd.gene.prot.domain", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
head(annos)
annos$snpeff.ann
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.hgvs_p",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
head(annos)
annos$cadd.gene
annos$cadd.gene$genename
annos$snpeff.ann
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
annos <- cbind(annos, coverage)
annos <- subset(annos, cadd.consequence %in% c("STOP_GAINED","STOP_LOST",
"NON_SYNONYMOUS", "SPLICE_SITE",
"CANONICAL_SPLICE", "REGULATORY"))
annos <- arrange(data.frame(subset(annos, is.na(exac.af) | exac.af < 0.1)), -dbnsfp.mutationtaster.converted_rankscore)
annos
head(annos)
names(annos)[names(annos) == "query"] <- "Variant"
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
DataFrame(annos)
head(annos)
df <- DataFrame(annos)
annos <- df
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
head(annos)
names(annos[1:14]) <- c("Variant", "G1000_AF", "MutationTaster Score", "MutationTaster Prediction", "Polyphen-2 Prediction",
"Polyphen-2 Score", "dbSNP rsid", "ExAC AF", "Consequence", "Gene", "CADD Score", "Amino Acid",
"COSMIC ID", "COSMIC Tumor Site")
head(annos)
names(annos[c(1:14)]) <- c("Variant", "G1000_AF", "MutationTaster Score", "MutationTaster Prediction", "Polyphen-2 Prediction",
"Polyphen-2 Score", "dbSNP rsid", "ExAC AF", "Consequence", "Gene", "CADD Score", "Amino Acid",
"COSMIC ID", "COSMIC Tumor Site")
head(annos)
names(annos[c(1:14)]) <- c("Variant", "G1000_AF", "MutationTaster Score", "MutationTaster Prediction", "Polyphen-2 Prediction",
"Polyphen-2 Score", "dbSNP rsid", "ExAC AF", "Consequence", "Gene", "CADD Score", "Amino Acid",
"COSMIC ID", "COSMIC Tumor Site")
head(annos)
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
a <- annotateVariantsFromVcf(vcf.path)
head(a)
vcf <- readVcf(vcf.path, genome="hg19")
snp <- vcf[isSNV(vcf)]
hgvs <- formatHgvs(snp, "snp")
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.hgvs_p",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
annos <- cbind(annos, coverage)
annos <- subset(annos, cadd.consequence %in% c("STOP_GAINED","STOP_LOST",
"NON_SYNONYMOUS", "SPLICE_SITE",
"CANONICAL_SPLICE", "REGULATORY"))
annos <- arrange(data.frame(subset(annos, is.na(exac.af) | exac.af < 0.1)), -dbnsfp.mutationtaster.converted_rankscore)
annos <- DataFrame(annos)
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
setnames(annos,
old = c("query", "dbsnp.rsid", "cadd.consequence", "snpeff.ann", "cadd.gene",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af", "dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"),
new = c("Variant", "dbSNP rsid", "Consequence", "Amino Acid", "Gene",
"COSMIC ID", "COSMIC Tumor Site", "ExAC AF", "G1000_AF", "CADD Score",
"Polyphen-2 Score", "Polyphen-2 Prediction", "MutationTaster Score", "MutationTaster Prediction"))
library(data.table)
setnames(annos,
old = c("query", "dbsnp.rsid", "cadd.consequence", "snpeff.ann", "cadd.gene",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af", "dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"),
new = c("Variant", "dbSNP rsid", "Consequence", "Amino Acid", "Gene",
"COSMIC ID", "COSMIC Tumor Site", "ExAC AF", "G1000_AF", "CADD Score",
"Polyphen-2 Score", "Polyphen-2 Prediction", "MutationTaster Score", "MutationTaster Prediction"))
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.hgvs_p",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
annos <- cbind(annos, coverage)
annos <- subset(annos, cadd.consequence %in% c("STOP_GAINED","STOP_LOST",
"NON_SYNONYMOUS", "SPLICE_SITE",
"CANONICAL_SPLICE", "REGULATORY"))
annos <- arrange(data.frame(subset(annos, is.na(exac.af) | exac.af < 0.1)), -dbnsfp.mutationtaster.converted_rankscore)
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
setnames(annos,
old = c("query", "dbsnp.rsid", "cadd.consequence", "snpeff.ann", "cadd.gene",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af", "dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"),
new = c("Variant", "dbSNP rsid", "Consequence", "Amino Acid", "Gene",
"COSMIC ID", "COSMIC Tumor Site", "ExAC AF", "G1000_AF", "CADD Score",
"Polyphen-2 Score", "Polyphen-2 Prediction", "MutationTaster Score", "MutationTaster Prediction"))
head(annos)
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
annos <- DataFrame(annos) ##for some reason have to do this to eliminate the following columns
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
annos <- lapply(annos, function(i) sapply(i, .collapse))
## merge annotations
annotationsIntogen <- merge(annos, intogen, all.x=TRUE)
annotationsPanCancer <- merge(annotationsIntogen, panCancer, all.x=TRUE)
annotationsDruggability <- merge(annotationsPanCancer, druggability, all.x=TRUE, sort=TRUE)
## write file
annotations <- data.frame(sapply(annotationsDruggability, as.character), stringsAsFactors = FALSE)
annotationsFinal <- subset(annotations, !is.na(reported))
annotationsFinal[is.na(annotationsFinal)] <- ""
# write.table(annotationsFinal, gsub(".vcf", ".annotated.txt", vcf.path), sep="\t", row.names=FALSE, quote=FALSE)
annotationsFinal
head(annotations)
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.hgvs_p",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
coverage
head(coverage)
head(ad)
head(DP)
head(dp)
names(coverage) <- c("AD", "DP")
annos <- cbind(annos, coverage)
annos <- subset(annos, cadd.consequence %in% c("STOP_GAINED","STOP_LOST",
"NON_SYNONYMOUS", "SPLICE_SITE",
"CANONICAL_SPLICE", "REGULATORY"))
annos <- arrange(data.frame(subset(annos, is.na(exac.af) | exac.af < 0.1)), -dbnsfp.mutationtaster.converted_rankscore)
setnames(annos,
old = c("query", "dbsnp.rsid", "cadd.consequence", "snpeff.ann", "cadd.gene",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af", "dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"),
new = c("Variant", "dbSNP rsid", "Consequence", "Amino Acid", "Gene",
"COSMIC ID", "COSMIC Tumor Site", "ExAC AF", "G1000_AF", "CADD Score",
"Polyphen-2 Score", "Polyphen-2 Prediction", "MutationTaster Score", "MutationTaster Prediction"))
annos <- DataFrame(annos) ##for some reason have to do this to eliminate the following columns
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
annos <- lapply(annos, function(i) sapply(i, .collapse))
## merge annotations
annotationsIntogen <- merge(annos, intogen, all.x=TRUE)
annotationsPanCancer <- merge(annotationsIntogen, panCancer, all.x=TRUE)
annotationsDruggability <- merge(annotationsPanCancer, druggability, all.x=TRUE, sort=TRUE)
## write file
annotations <- data.frame(sapply(annotationsDruggability, as.character), stringsAsFactors = FALSE)
head(annotations)
data.frame(ad, dp)
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
a <- annotateVariantsFromVcf(vcf.path)
a
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
a <- annotateVariantsFromVcf(vcf.path)
vcf.path <- "~/AWS/storage/MP/vcf/3504-BY-0001-29577638_3504-BY-0002-29577633_mutect.filt.vcf.gz"
vcf <- readVcf(vcf.path, genome="hg19")
snp <- vcf[isSNV(vcf)]
hgvs <- formatHgvs(snp, "snp")
annos <- getVariants(hgvs, fields=c("dbsnp.rsid", "cadd.consequence",
#"dbnsfp.aa.pos", "dbnsfp.aa.ref", "dbnsfp.aa.alt",
"snpeff.ann.hgvs_p",
# "cadd.gene.prot.protpos", "cadd.oaa", "cadd.naa",
"cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af",
"dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"
))
dp <- geno(snp)$DP
row.names(dp) <- NULL
ad <- geno(snp)$AD
row.names(ad) <- NULL
coverage <- cbind(data.frame(ad), dp)
names(coverage) <- c("AD", "DP")
head(coverage)
coverage <- cbind(data.frame(ad), dp)
head(coverage)
annos <- subset(annos, cadd.consequence %in% c("STOP_GAINED","STOP_LOST",
"NON_SYNONYMOUS", "SPLICE_SITE",
"CANONICAL_SPLICE", "REGULATORY"))
annos <- arrange(data.frame(subset(annos, is.na(exac.af) | exac.af < 0.1)), -dbnsfp.mutationtaster.converted_rankscore)
head(annos)
setnames(annos,
old = c("query", "dbsnp.rsid", "cadd.consequence", "snpeff.ann", "cadd.gene.genename",
"cosmic.cosmic_id", "cosmic.tumor_site", "exac.af", "dbnsfp.1000gp3.af", "cadd.phred",
"dbnsfp.polyphen2.hdiv.rankscore", "dbnsfp.polyphen2.hdiv.pred",
"dbnsfp.mutationtaster.converted_rankscore", "dbnsfp.mutationtaster.pred"),
new = c("Variant", "dbSNP rsid", "Consequence", "Amino Acid", "Gene",
"COSMIC ID", "COSMIC Tumor Site", "ExAC AF", "G1000_AF", "CADD Score",
"Polyphen-2 Score", "Polyphen-2 Prediction", "MutationTaster Score", "MutationTaster Prediction"))
annos <- DataFrame(annos) ##for some reason have to do this to eliminate the following columns
annos[c("X_id", "notfound", "X_score", "cadd._license")] <- NULL
annos <- lapply(annos, function(i) sapply(i, .collapse))
## merge annotations
annotationsIntogen <- merge(annos, intogen, all.x=TRUE)
annotationsPanCancer <- merge(annotationsIntogen, panCancer, all.x=TRUE)
annotationsDruggability <- merge(annotationsPanCancer, druggability, all.x=TRUE, sort=TRUE)
## write file
annotations <- data.frame(sapply(annotationsDruggability, as.character), stringsAsFactors = FALSE)
annotationsFinal <- subset(annotations, !is.na(reported))
annotationsFinal[is.na(annotationsFinal)] <- ""
head(annotationsFinal)
vcf.path <- "~/AWS/storage/CCD1-53/vcf/CCD1-53/CCD1-53_somatic_merged.vcf.gz"
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
annotateVariantsFromVcf(vcf.path)
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
annotateVariantsFromVcf(vcf.path)
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
annotateVariantsFromVcf(vcf.path)
drugGeneInteraction <- function(gene.list) {
api <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
query <- paste(api, gene.list, sep="")
res <- POST(query)
httr::content(res, "text")
}
drugGeneInteraction <- function(gene.list) {
api <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
gene.list <- .collapse(gene.list)
query <- paste(api, gene.list, sep="")
res <- POST(query)
httr::content(res, "text")
}
drugGeneInteraction("EGFR,TP53")
gene.list <- "EGFR,TP53"
api <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
gene.list <- .collapse(gene.list)
query <- paste(api, gene.list, sep="")
res <- POST(query)
httr::content(res, "text")
res
query
params <- list(genes=.collapse(gene.list))
query <- paste(api, gene.list, sep="")
res <- POST(query, body=params)
res
httr::content(res, "text")
drugGeneInteraction <- function(gene.list) {
api <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
params <- list(genes=.collapse(gene.list))
query <- paste(api, gene.list, sep="")
res <- POST(query, body=params)
httr::content(res, "text")
}
drugs <- drugGeneInteraction("EGFR,TP53")
fromJSON(drugs)
source('~/sulab/repos/myvariant-release/R/utils.R')
fromJSON(.json.batch.collapse(drugs), simplifyDataFrame=FALSE)
.json2df(drugs)
drugGeneInteraction <- function(gene.list) {
url <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
params <- list(genes=.collapse(gene.list), drug_types=antineoplastic)
query <- paste(url, gene.list, sep="")
res <- POST(query, body=params)
httr::content(res, "text")
}
drugs <- drugGeneInteraction("EGFR,TP53")
drugGeneInteraction <- function(gene.list) {
url <- "http://dgidb.genome.wustl.edu/api/v1/interactions.json?"
params <- list(genes=.collapse(gene.list), drug_types="antineoplastic")
query <- paste(url, gene.list, sep="")
res <- POST(query, body=params)
httr::content(res, "text")
}
drugs <- drugGeneInteraction("EGFR,TP53")
drugs
fromJSON(drugs)
unique(drugs$interactions)
unique(fromJSON(drugs)$interactions)
unique(fromJSON(drugs)$matchedterms$interactions)
drugs <- fromJSON(drugs)
drugs
names(drugs)
names(drugs$matchedTerms)
unique(drugs$matchedTerms$interactions)
drugs$matchedTerms$interactions
unique(drugs$matchedTerms$interactions$drugName)
unique(drugs$matchedTerms$interactions$[[1]]drugName)
unique(drugs$matchedTerms$interactions[[1]]$drugName)
unique(drugs$matchedTerms$interactions)
unique(drugs$matchedTerms$interactions[[1]]$drugName)
.collapse(unique(drugs$matchedTerms$interactions[[1]]$drugName))
List(unique(drugs$matchedTerms$interactions[[1]]$drugName))
x <- read.csv("~/AWS/storage/patients/vcf/CCD266-T1-DNA-Rep1/CCD266-T1-DNA-Rep1_merged.annotated.txt", header=T, stringsAsFactors = F, sep="\t")
x
head(x)
af <- x$AD/x$DP
af
plot(density(af))
source('~/avera/repos/variant-analysis/annotateVariantsFromVcf.R')
vcf.path <- "~/AWS/storage/patients/snpir/CCD018-T1-RNA-Rep1/CCD018-T1-RNA-Rep1_final_variants_sort.vcf.gz"
vcf <- readVcf(vcf.path, genome="hg19")
vcf
vcf
dim(vcf)
dim(vcf)[1]
dim(vcf)[1] == 0
vcf <- readVcf("~/AWS/storage/patients/snpir/CCD052-T1-RNA-Rep1/CCD052-T1-RNA-Rep1_final_variants_sort.vcf.gz", "hg19")
vcf <- readVcf("~/AWS/storage/patients/snpir/CCD052-T1-RNA-Rep1/CCD052-T1-RNA-Rep1_final_variants_sort.vcf.gz", "hg19")
vcf <- readVcf("~/AWS/storage/patients/snpir/CCD052-T1-RNA-Rep1/CCD052-T1-RNA-Rep1_final_variants_sort.vcf.gz", "hg19")
vcf <- readVcf("~/AWS/storage/patients/snpir/CCD052-T1-RNA-Rep1/CCD052-T1-RNA-Rep1_final_variants_sort.vcf.gz", "hg19")
vcf <- readVcf("~/AWS/storage/patients/snpir/CCD052-T1-RNA-Rep1/CCD052-T1-RNA-Rep1_final_variants_sort.vcf.gz", "hg19")
vcf
setwd("~/avera/repos/GeneFreq")
shiny::runApp()
shiny::runApp()
shiny::runApp()
